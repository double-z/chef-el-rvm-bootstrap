#!/bin/bash
# 
# Dynamically generated by Chef for <%= @node[:fqdn] %> -
# local modifications will be replaced.
#
# Cookbook: <%= @cookbook_name %>
# Recipe: <%= @recipe_name %>
#
# chef-client Startup script for the Chef client
#
# chkconfig: - 98 02
# description: Client component of the Chef systems integration framework.

### BEGIN INIT INFO
# Provides: chef-client
# Required-Start: $local_fs $network $remote_fs
# Required-Stop: $local_fs $network $remote_fs
# Should-Start: $named $time
# Should-Stop: $named $time
# Short-Description: Startup script for the Chef client
# Description: Client component of the Chef systems integration framework.
### END INIT INFO

# Source function library
. /etc/init.d/functions

exec="/usr/bin/chef-client"
prog="chef-client"

[ -e /etc/sysconfig/$prog ] && . /etc/sysconfig/$prog

# Configuration file for the chef-client service
config=/etc/chef/client.rb
pidfile=<%= @node[:chef][:run_path] %>/client.pid
lockfile=/var/lock/subsys/$prog
logfile=<%= @node[:chef][:log_dir] %>/client.log
# Sleep interval between runs.
# This value is in seconds.
interval=<%= @node[:chef][:client_interval] %>
# Maximum amount of random delay before starting a run. Prevents every client
# from contacting the server at the exact same time.
# This value is in seconds.
splay=<%= @node[:chef][:client_splay] %>
# Any additional chef-client options.
options=

start() {
    [ -x $exec ] || exit 5
    [ -f $config ] || exit 6
    echo -n $"Starting $prog: "
    daemon \
      $prog -d -c "$config" -L "$logfile" -i "$interval" -s "$splay" \
            -P "$pidfile" "$options"
    retval=$?
    echo
    [ $retval -eq 0 ] && touch $lockfile
    return $retval
}

stop() {
    echo -n $"Stopping $prog: "
    killproc -p $pidfile chef-client
    retval=$?
    echo
    [ $retval -eq 0 ] && rm -f $lockfile
    return $retval
}

restart () {
    stop
    start
}

reload() {
    restart
}

force_reload() {
    restart
}

rh_status() {
    # run checks to determine if the service is running or use generic status
    status -p $pidfile $prog
}

rh_status_q() {
    rh_status >/dev/null 2>&1
}

case "$1" in
    start)
        rh_status_q && exit 0
        $1
        ;;
    stop)
        rh_status_q || exit 0
        $1
        ;;
    restart)
        $1
        ;;
    reload)
        rh_status_q || exit 7
        $1
        ;;
    force-reload)
        force_reload
        ;;
    status)
        rh_status
        ;;
    condrestart|try-restart)
        rh_status_q || exit 0
        restart
        ;;
    *)
        echo $"Usage: $0 {start|stop|status|restart|condrestart|try-restart|reload|force-reload}"
        exit 2
esac
exit $?
