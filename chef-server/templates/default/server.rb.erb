# Dynamically generated by Chef for <%= node['fqdn'] %> -
# local modifications will be replaced.
#
# Cookbook: <%= @cookbook_name %>
# Recipe: <%= @recipe_name %>
#
# Configuration File For Chef (chef-server)
#
# chef-server is a Merb application slice that provides the Chef API.
#
# By default it is configured to run via Thin. It can be run manually as:
#
# chef-server -p 4000 -e production -a thin
#
# This starts up the RESTful Chef Server API on port 4000 in production mode
# using the thin server adapter.
#
# This file configures the behavior of the running server itself.
#
# It is a Ruby DSL config file, and can embed regular Ruby code in addition to
# the configuration settings. Some settings use Ruby symbols, which are a value
# that starts with a colon. In Ruby, anything but 'false' or 'nil' is true. To
# set something to false:
#
# some_setting false
#
# log_level specifies the level of verbosity for output.
# valid values are: :debug, :info, :warn, :error, :fatal

# Default is :info, see http://tickets.opscode.com/browse/CHEF-1122
log_level :warn

# log_location specifies where the server should log to.
# valid values are: a quoted string specifying a file, or STDOUT with
# no quotes. This is the application log for the Merb workers that get
# spawned. The chef-server daemon is configured to log to
# /var/log/chef/server.log in /etc/chef/default/chef-server.

log_location STDOUT

# ssl_verify_mode specifies if the REST client should verify SSL certificates.
# valid values are :verify_none, :verify_peer. The default Chef Server
# installation on Debian will use a self-generated SSL certificate so this
# should be :verify_none unless you replace the certificate.

ssl_verify_mode :verify_none

# chef_server_url specifies the URL for the server API. The process actually
# listens on 0.0.0.0:PORT. valid values are any HTTP URL. To change the port
# the server listens on, modify the server_port in the attributes. 

chef_server_url "<%= node['chef_server']['server_url'] %>"

# cookbook_path is a Ruby array of filesystem locations to search for cookbooks
# that are available for clients. This is also where cookbooks uploaded via
# 'knife' are stored.
#
# valid value is a string, or an array of strings of filesystem directory locations.
# This setting is searched beginning (index 0) to end in order. You might specify
# multiple search paths for cookbooks if you want to use an upstream source, and
# provide localised "site" overrides. These should come after the 'upstream' source.
# The default value, /var/lib/chef/cookbooks does not contain any cookbooks by default.
#
# See the Chef Wiki for more information about setting up a local repository for
# working on cookbooks: http://wiki.opscode.com/display/chef/Chef+Repository

cookbook_path [ "<%= node['chef_server']['path'] %>/cookbooks" ]

# cookbook_tarball_path is the location where the server will store uploaded
# cookbook tarballs. These tarballs can be downloaded with knife, for
# redistribution.

cookbook_tarball_path "<%= node['chef_server']['path'] %>/cookbook-tarballs"

# sandbox_path is the location where the chef server temporarily stores files
# uploaded for cookbooks.

sandbox_path "<%= node['chef_server']['cache_path'] %>/sandboxes"

# checksum_path sets the location for the checksum index for each cookbook
# file uploaded.
#
# NOTE: Important change in version 0.9.10+, this location is different
# so it doesn't conflict with the cached checksums from the chef client.

checksum_path "<%= node['chef_server']['cache_path'] %>/cookbook_index"

# file_cache_path specifies where chef should cache cookbooks, server
# cookie ID, and openid registration data.
# valid value is any filesystem directory location.

file_cache_path "<%= node['chef_server']['cache_path'] %>"

# node_path specifies a location for where to find node-specific recipes.
# valid values are any filesystem direcory location.

node_path "<%= node['chef_server']['path'] %>/nodes"

# openid_store_path specifies a location where to keep openid nonces for clients.
# valid values are any filesystem directory location.
#
# NOTE: OpenID is deprecated and this option may not be used, kept for
# historical purposes because the default in Chef is not FHS compliant, and
# may be removed in a future version.

openid_store_path "<%= node['chef_server']['path'] %>/openid/store"

# openid_store_path specifies a location where to keep openid nonces for clients.
# valid values are any filesystem directory location.
#
# NOTE: OpenID is deprecated and this option may not be used, kept for
# historical purposes because the default in Chef is not FHS compliant, and
# may be removed in a future version.

openid_cstore_path "<%= node['chef_server']['path'] %>/openid/cstore"

# role_path designates where the server should load role JSON and Ruby DSL
# files from.
# valid values are any filesystem directory location. Roles are a feature
# that allow you to easily reuse lists of recipes and attribute settings.
# Please see the Chef Wiki page for information on how to utilize the feature.
# http://wiki.opscode.com/display/chef/Roles
#
# NOTE: The role_path setting is deprecated on the chef-server, as the
# roles are now stored directly in CouchDB rather than on the filesystem.
# This option is kept for historical purposes because the default in Chef is
# not FHS compliant, and may be removed in a future version.

#role_path "<%= node['chef_server']['path'] %>/roles"

# cache_options sets options used by the moneta library for local cache
# for checksums of compared objects.

cache_options({ :path => "<%= node['chef_server']['cache_path'] %>/checksums", :skip_expires => true})

# Mixlib::Log::Formatter.show_time specifies whether the chef-client log should
# contain timestamps.
# valid values are true or false (no quotes, see above about Ruby idioms). The
# printed timestamp is rfc2822, for example:
# Fri, 31 Jul 2009 19:19:46 -0600

Mixlib::Log::Formatter.show_time = true

# The following options configure the signing CA so it can be read by
# non-privileged user for the server daemon.

signing_ca_cert "<%= node['chef_server']['conf_dir'] %>/certificates/cert.pem"
signing_ca_key "<%= node['chef_server']['conf_dir'] %>/certificates/key.pem"
signing_ca_user "chef"
signing_ca_group "chef"

# rabbitmq password
#amqp_pass File.read('<%= node['chef_server']['conf_dir'] %>/amqp_passwd').chomp

couchdb_database "chef"
umask <%= node['chef_server']['umask'] %>

validation_client_name "chef-validator"
validation_key "<%= node['chef_server']['conf_dir'] %>/validation.pem"
client_key "<%= node['chef_server']['conf_dir'] %>/client.pem"
<% -%>
<% if node['chef_server']['webui_enabled'] -%>
web_ui_admin_user_name "admin"
# web_ui_client_name specifies the user to use when accessing the Chef          
# Server API. By default this is already set to "chef-webui".                   
#                                                                               
# This user gets created by the chef-server and stored in CouchDB the           
# first time the server starts up if the user and key don't exist.              
                                                                                
web_ui_client_name "chef-webui"                                                 
                                                                                
# web_ui_admin_user_name and web_ui_admin_default_password specify the          
# user and password that a human can use to initially log into the              
# chef-server-webui when it starts. The default value for the user is 'admin'   
# and the default password is'p@ssw0rd1' should be changed immediately on       
# login. The web form will display the password reset page on first login.      
# During package installation, debconf will prompt for a password, so this      
# may differ from the default.                                                  
                                                                                
web_ui_admin_user_name "admin"                                                  
web_ui_admin_default_password "p@ssw0rd1"                                       
                                                                                
# web_ui_key specifics the file to use for authenticating with the Chef         
# Server API. By default this is already set to "/etc/chef/webui.pem".          
#                                                                               
# This file gets created by the chef-server and the public key stored in        
# CouchDB the first time the server starts up if the user and key don't         
# exist.                                                                        
                                                                                
web_ui_key "/etc/chef/webui.pem"
<% end -%>
